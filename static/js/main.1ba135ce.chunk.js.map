{"version":3,"sources":["common/Clickable.js","common/TextWithParagraphs.js","constants.js","utils.js","LegendModal.js","index.js"],"names":["Clickable","_ref","onClick","children","props","Object","objectWithoutProperties","react_default","a","createElement","assign","role","tabIndex","onKeyDown","event","key","TextWithParagraphs","paragraphs","text","split","lastParagraphIndex","length","map","paragraph","i","react","Fragment","GA_ID","LIGHT_STYLE","concat","MINSK","BELARUS_BOUNDS","PropTypes","shape","id","number","isRequired","title","string","coordinates","arrayOf","emoji","getGoogleMapsUrl","_ref2","slicedToArray","lng","lat","zoom","arguments","undefined","track","options","ReactGA","objectSpread","category","LegendModal","_ref$legend","legend","emojiCode","onClose","className","src","alt","href","rel","target","bind","action","label","formatcoords","format","latLonSeparator","decimalPlaces","common_TextWithParagraphs","Map","ReactMapboxGl","accessToken","minZoom","maxZoom","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleZoom","state","nextZoom","Math","round","getZoom","setState","setActiveLegendId","activeLegendId","legendsById","keyBy","legends","initialize","debug","pageview","document","location","pathname","_this2","_this$state","activeLegend","style","containerStyle","position","top","bottom","width","fitBounds","fitBoundsOptions","padding","center","onZoom","lib_esm","zIndex","filter","common_Clickable","src_LegendModal","Component","rootElement","getElementById","ReactDOM","render","src_App","require"],"mappings":"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","file":"static/js/main.1ba135ce.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Clickable = ({ onClick, children, ...props }) => (\n  <div\n    role=\"button\"\n    tabIndex={0}\n    onClick={onClick}\n    onKeyDown={event => {\n      if (event.key === 'Enter') {\n        onClick(event);\n      }\n    }}\n    {...props}\n  >\n    {children}\n  </div>\n);\n\nClickable.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Clickable;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nconst TextWithParagraphs = ({ text }) => {\n  const paragraphs = text.split('\\n');\n  const lastParagraphIndex = paragraphs.length - 1;\n\n  return paragraphs.map((paragraph, i) => (\n    <Fragment key={i}>\n      {paragraph}\n      {i < lastParagraphIndex && (\n        <>\n          <br />\n          <br />\n        </>\n      )}\n    </Fragment>\n  ));\n};\n\nTextWithParagraphs.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default TextWithParagraphs;\n","import PropTypes from 'prop-types';\n\nexport const MAPBOX_ACCESS_TOKEN =\n  'pk.eyJ1IjoidWxhZGJvaGRhbiIsImEiOiJjam9kMDQ1NzYxOTYyM3FvanhpOXE1cDIzIn0.JiXb8lR9e53GqZz51PZdaQ';\n\nexport const GA_ID = {\n  staging: 'UA-117143376-4',\n  production: 'UA-117143376-3',\n};\n\nconst STYLE_PREFIX = 'mapbox://styles/uladbohdan';\n\nexport const LIGHT_STYLE = `${STYLE_PREFIX}/cjpjxmip00js22snnkwi85d4i`;\n\nexport const MINSK = [27.5615, 53.9045];\n\nexport const BELARUS_BOUNDS = [\n  23.178357, // west\n  51.261881, // south\n  32.776784, // east\n  56.139922, // north\n];\n\nexport const EMOJI_SCALE_RATE = 4.5;\n\nexport const LegendShape = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  coordinates: PropTypes.arrayOf(PropTypes.number).isRequired,\n  text: PropTypes.string.isRequired,\n  emoji: PropTypes.string.isRequired,\n});\n","import ReactGA from 'react-ga';\n\nexport const getGoogleMapsUrl = ([lng, lat], zoom = 7) =>\n  `http://www.google.com/maps/place/${lat},${lng}/@${lat},${lng},${zoom}z`;\n\nexport const track = options => {\n  if (!process.env.REACT_APP_WIR_ENV) {\n    return;\n  }\n  ReactGA.event({\n    category: 'Legends Map',\n    ...options,\n  });\n};\n","import React from 'react';\nimport formatcoords from 'formatcoords';\n\nimport TextWithParagraphs from './common/TextWithParagraphs';\n\nimport { LegendShape } from './constants';\nimport { getGoogleMapsUrl, track } from './utils';\n\nconst LegendModal = ({ legend: { emoji, emojiCode, coordinates, title, text }, onClose }) => (\n  <div className=\"legend__modal\">\n    <div className=\"legend__content\">\n      <div className=\"legend__top\">\n        <img className=\"legend__emoji\" src={`./images/${emojiCode}.png`} alt={title} />\n        <div className=\"legend__coords\">\n          <a\n            className=\"legend__coords_link\"\n            href={getGoogleMapsUrl(coordinates)}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            onClick={track.bind(null, { action: 'google-map-opened', label: `${emoji} ${title}` })}\n          >\n            {formatcoords(coordinates, true).format('DD MM X', {\n              latLonSeparator: ', ',\n              decimalPlaces: 2,\n            })}\n          </a>\n        </div>\n        <div className=\"legend__title\">{title}</div>\n      </div>\n      <div className=\"legend__text\">\n        <TextWithParagraphs text={text} />\n      </div>\n      <button className=\"legend__close-button\" onClick={onClose}>\n        <i className=\"legend__close-icon fa fa-times\" />\n      </button>\n    </div>\n  </div>\n);\n\nLegendModal.propTypes = {\n  legend: LegendShape.isRequired,\n};\n\nexport default LegendModal;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ReactMapboxGl, { Marker, ZoomControl } from 'react-mapbox-gl';\nimport ReactGA from 'react-ga';\nimport keyBy from 'lodash/keyBy';\n\nimport Clickable from './common/Clickable';\nimport LegendModal from './LegendModal';\n\nimport { track } from './utils';\n\nimport {\n  MAPBOX_ACCESS_TOKEN,\n  GA_ID,\n  LIGHT_STYLE,\n  MINSK,\n  BELARUS_BOUNDS,\n  EMOJI_SCALE_RATE,\n  LegendShape,\n} from './constants';\nimport './styles.scss';\n\nconst Map = ReactMapboxGl({\n  accessToken: MAPBOX_ACCESS_TOKEN,\n  minZoom: 4,\n  maxZoom: 9,\n});\n\n// NOTE: When rendering many objects,\n// avoid using `Markers` as it will negatively affect performance.\n// Use `Layers` and `Features` instead.\n// https://github.com/alex3165/react-mapbox-gl/blob/master/docs/API.md#marker\n\nclass App extends Component {\n  static propTypes = {\n    legends: PropTypes.arrayOf(LegendShape).isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.legendsById = keyBy(this.props.legends, 'id');\n    this.state = { activeLegendId: null };\n  }\n\n  componentDidMount() {\n    if (process.env.REACT_APP_WIR_ENV) {\n      ReactGA.initialize(GA_ID[process.env.REACT_APP_WIR_ENV], {\n        debug: false,\n      });\n      ReactGA.pageview(document.location.pathname);\n    }\n  }\n\n  handleZoom = map => {\n    const { zoom } = this.state;\n    const nextZoom = Math.round(map.getZoom());\n    if (nextZoom !== zoom) {\n      this.setState({ zoom: nextZoom });\n    }\n  };\n\n  setActiveLegendId = activeLegendId => this.setState({ activeLegendId });\n\n  render() {\n    const { legends } = this.props;\n    const { activeLegendId, zoom } = this.state;\n    const activeLegend = this.legendsById[activeLegendId];\n    return (\n      <>\n        <Map\n          style={LIGHT_STYLE}\n          containerStyle={{\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            width: '100%',\n          }}\n          // TODO: fix calling `fitBounds` on window resizing\n          fitBounds={BELARUS_BOUNDS}\n          fitBoundsOptions={{\n            padding: 25,\n          }}\n          center={MINSK}\n          onZoom={this.handleZoom}\n        >\n          <ZoomControl style={{ zIndex: 1 }} />\n          {legends\n            .filter(({ emoji }) => emoji)\n            .map(({ id, title, coordinates, emoji, emojiCode }) => (\n              <Marker key={id} coordinates={coordinates}>\n                <Clickable\n                  onClick={() => {\n                    track({ action: 'emoji-clicked', label: `${emoji} ${title}` });\n                    this.setState({ activeLegendId: id });\n                  }}\n                >\n                  <img\n                    alt={emoji}\n                    src={`./images/${emojiCode}.png`}\n                    width={zoom * EMOJI_SCALE_RATE}\n                  />\n                </Clickable>\n              </Marker>\n            ))}\n        </Map>\n        {activeLegend && (\n          <LegendModal legend={activeLegend} onClose={() => this.setActiveLegendId(null)} />\n        )}\n        <div className=\"title title__map\">\n          Мапа <br /> беларускіх <br /> легенд\n        </div>\n        <div className=\"title title__wir-reference\">\n          Зроблена для <br /> пляцоўкі{' '}\n          <a href=\"http://wir.by\" target=\"_blank\" rel=\"noreferrer noopener\">\n            wir.by\n          </a>\n        </div>\n      </>\n    );\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App legends={require('./legends')} />, rootElement);\n"],"sourceRoot":""}
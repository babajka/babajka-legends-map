{"version":3,"sources":["common/Clickable.js","common/TextWithParagraphs.js","constants.js","utils.js","LegendModal.js","index.js"],"names":["Clickable","_ref","onClick","children","props","Object","objectWithoutProperties","react_default","a","createElement","assign","role","tabIndex","onKeyDown","event","key","TextWithParagraphs","paragraphs","text","split","lastParagraphIndex","length","map","paragraph","i","react","Fragment","LIGHT_STYLE","concat","MINSK","BELARUS_BOUNDS","PropTypes","shape","id","number","isRequired","title","string","coordinates","arrayOf","emoji","getGoogleMapsUrl","_ref2","slicedToArray","lng","lat","zoom","arguments","undefined","LegendModal","_ref$legend","legend","emojiCode","onClose","className","src","alt","href","rel","target","formatcoords","format","latLonSeparator","decimalPlaces","common_TextWithParagraphs","Map","ReactMapboxGl","accessToken","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setActiveLegendId","activeLegendId","setState","legendsById","keyBy","legends","state","_this2","activeLegend","style","containerStyle","position","top","bottom","width","fitBounds","fitBoundsOptions","padding","center","filter","lib_esm","common_Clickable","src_LegendModal","Component","rootElement","document","getElementById","ReactDOM","render","src_App","require"],"mappings":"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","file":"static/js/main.ddc70d45.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Clickable = ({ onClick, children, ...props }) => (\n  <div\n    role=\"button\"\n    tabIndex={0}\n    onClick={onClick}\n    onKeyDown={event => {\n      if (event.key === 'Enter') {\n        onClick(event);\n      }\n    }}\n    {...props}\n  >\n    {children}\n  </div>\n);\n\nClickable.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Clickable;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nconst TextWithParagraphs = ({ text }) => {\n  const paragraphs = text.split('\\n');\n  const lastParagraphIndex = paragraphs.length - 1;\n\n  return paragraphs.map((paragraph, i) => (\n    <Fragment key={i}>\n      {paragraph}\n      {i < lastParagraphIndex && (\n        <>\n          <br />\n          <br />\n        </>\n      )}\n    </Fragment>\n  ));\n};\n\nTextWithParagraphs.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default TextWithParagraphs;\n","import PropTypes from 'prop-types';\n\nexport const ACCESS_TOKEN =\n  'pk.eyJ1IjoidWxhZGJvaGRhbiIsImEiOiJjam9kMDQ1NzYxOTYyM3FvanhpOXE1cDIzIn0.JiXb8lR9e53GqZz51PZdaQ';\n\nconst STYLE_PREFIX = 'mapbox://styles/uladbohdan';\n\nexport const LIGHT_STYLE = `${STYLE_PREFIX}/cjpjxmip00js22snnkwi85d4i`;\n\nexport const MINSK = [27.5615, 53.9045];\n\nexport const BELARUS_BOUNDS = [\n  23.178357, // west\n  51.261881, // south\n  32.776784, // east\n  56.139922, // north\n];\n\nexport const LegendShape = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  coordinates: PropTypes.arrayOf(PropTypes.number).isRequired,\n  text: PropTypes.string.isRequired,\n  emoji: PropTypes.string.isRequired,\n});\n","export const getGoogleMapsUrl = ([lng, lat], zoom = 7) =>\n  `http://www.google.com/maps/place/${lat},${lng}/@${lat},${lng},${zoom}z`;\n","import React from 'react';\nimport formatcoords from 'formatcoords';\n\nimport TextWithParagraphs from './common/TextWithParagraphs';\n\nimport { LegendShape } from './constants';\nimport { getGoogleMapsUrl } from './utils';\n\nconst LegendModal = ({ legend: { emoji, emojiCode, coordinates, title, text }, onClose }) => (\n  <div className=\"legend__modal\">\n    <div className=\"legend__content\">\n      <div className=\"legend__top\">\n        <img className=\"legend__emoji\" src={`./images/${emojiCode}.png`} alt={title} />\n        <div className=\"legend__coords\">\n          <a\n            className=\"legend__coords_link\"\n            href={getGoogleMapsUrl(coordinates)}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            {formatcoords(coordinates, true).format('DD MM X', {\n              latLonSeparator: ', ',\n              decimalPlaces: 2,\n            })}\n          </a>\n        </div>\n        <div className=\"legend__title\">{title}</div>\n      </div>\n      <div className=\"legend__text\">\n        <TextWithParagraphs text={text} />\n      </div>\n      <button className=\"legend__close-button\" onClick={onClose}>\n        <i className=\"legend__close-icon fa fa-times\" />\n      </button>\n    </div>\n  </div>\n);\n\nLegendModal.propTypes = {\n  legend: LegendShape.isRequired,\n};\n\nexport default LegendModal;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ReactMapboxGl, { Marker } from 'react-mapbox-gl';\nimport keyBy from 'lodash/keyBy';\n\nimport Clickable from './common/Clickable';\nimport LegendModal from './LegendModal';\n\nimport { ACCESS_TOKEN, LIGHT_STYLE, MINSK, BELARUS_BOUNDS, LegendShape } from './constants';\nimport './styles.scss';\n\nconst Map = ReactMapboxGl({\n  accessToken: ACCESS_TOKEN,\n});\n\n// NOTE: When rendering many objects,\n// avoid using `Markers` as it will negatively affect performance.\n// Use `Layers` and `Features` instead.\n// https://github.com/alex3165/react-mapbox-gl/blob/master/docs/API.md#marker\n\nclass App extends Component {\n  static propTypes = {\n    legends: PropTypes.arrayOf(LegendShape).isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.legendsById = keyBy(this.props.legends, 'id');\n    this.state = { activeLegendId: null };\n  }\n\n  setActiveLegendId = activeLegendId => this.setState({ activeLegendId });\n\n  render() {\n    const { legends } = this.props;\n    const { activeLegendId } = this.state;\n    const activeLegend = this.legendsById[activeLegendId];\n    return (\n      <>\n        <Map\n          style={LIGHT_STYLE}\n          containerStyle={{\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            width: '100%',\n          }}\n          // TODO: fix calling `fitBounds` on window resizing\n          fitBounds={BELARUS_BOUNDS}\n          fitBoundsOptions={{\n            padding: 25,\n          }}\n          center={MINSK}\n        >\n          {legends\n            .filter(({ emoji }) => emoji)\n            .map(({ id, coordinates, emoji, emojiCode }) => (\n              <Marker key={id} coordinates={coordinates}>\n                <Clickable\n                  className=\"legends__marker\"\n                  onClick={() => this.setState({ activeLegendId: id })}\n                >\n                  <img className=\"legends__emoji\" alt={emoji} src={`./images/${emojiCode}.png`} />\n                </Clickable>\n              </Marker>\n            ))}\n        </Map>\n        {activeLegend && (\n          <LegendModal legend={activeLegend} onClose={() => this.setActiveLegendId(null)} />\n        )}\n      </>\n    );\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App legends={require('./legends')} />, rootElement);\n"],"sourceRoot":""}
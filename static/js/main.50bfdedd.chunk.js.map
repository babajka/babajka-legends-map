{"version":3,"sources":["utils.js","constants.js","components/GA.js","components/Clickable.js","components/Title.js","components/Wir.js","components/TextWithParagraphs.js","components/LegendModal.js","components/Map.js","index.js"],"names":["getGoogleMapsUrl","_ref","_ref2","Object","slicedToArray","lng","lat","zoom","arguments","length","undefined","concat","track","options","ReactGA","event","objectSpread","category","isDesktopDevice","window","innerHeight","innerWidth","clearUtmParams","_window","location","history","search","indexOf","replaceState","toString","replace","GA_ID","LIGHT_STYLE","MINSK","BELARUS_BOUNDS","zIndexElements","PropTypes","shape","id","number","isRequired","title","string","coordinates","arrayOf","text","emoji","_len","constants","Array","_key","reduce","acc","constant","createConstants","zIndexes","MAP","MARKER","CONTROLS","LABELS","LEGENDS_MODAL","cur","index","GA","initialize","debug","process","ga","pathname","hitCallback","this","props","children","Component","Clickable","onClick","objectWithoutProperties","react_default","a","createElement","assign","role","tabIndex","onKeyDown","key","Title","className","style","zIndex","Wir","src","alt","href","target","rel","TextWithParagraphs","paragraphs","split","lastParagraphIndex","map","paragraph","i","react","Fragment","LegendModal","_ref$legend","legend","emojiCode","onClose","components_Title","components_Wir","action","label","formatcoords","format","latLonSeparator","decimalPlaces","components_TextWithParagraphs","Mapbox","ReactMapboxGl","accessToken","logoPosition","minZoom","maxZoom","getFitBoundsOptions","padding","left","rightShift","top","topShift","bottom","right","Map","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleZoom","state","nextZoom","Math","round","getZoom","setState","calculateShifts","activeLegendId","resizeMap","resize","fitBounds","setActiveLegendId","legendsById","keyBy","legends","addEventListener","removeEventListener","_this2","_this$state","activeLegend","containerStyle","position","width","fitBoundsOptions","center","onZoom","onSourceDataLoading","lib_esm","filter","_ref3","components_Clickable","_ref4","currentTarget","blur","components_LegendModal","rootElement","document","getElementById","ReactDOM","render","components_GA","components_Map","require"],"mappings":"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","file":"static/js/main.50bfdedd.chunk.js","sourcesContent":["import ReactGA from 'react-ga';\n\nexport const getGoogleMapsUrl = ([lng, lat], zoom = 7) =>\n  `http://www.google.com/maps/place/${lat},${lng}/@${lat},${lng},${zoom}z`;\n\nexport const track = options => {\n  if (!process.env.REACT_APP_WIR_ENV) {\n    return;\n  }\n  ReactGA.event({\n    category: 'Legends Map',\n    ...options,\n  });\n};\n\nexport const createConstants = (...constants) =>\n  constants.reduce((acc, constant) => {\n    acc[constant] = constant;\n    return acc;\n  }, {});\n\nexport const isDesktopDevice = () => window.innerHeight < window.innerWidth;\n\nexport const clearUtmParams = function() {\n  const { location, history } = window;\n  const isUtmsInQuery = location.search.indexOf('utm_') !== -1;\n  if (isUtmsInQuery && history.replaceState) {\n    history.replaceState({}, '', location.toString().replace(/(&|\\?)utm([_a-z0-9=]+)/g, ''));\n  }\n};\n","import PropTypes from 'prop-types';\n\nimport { createConstants } from './utils';\n\nexport const MAPBOX_ACCESS_TOKEN =\n  'pk.eyJ1IjoidWxhZGJvaGRhbiIsImEiOiJjam9kMDQ1NzYxOTYyM3FvanhpOXE1cDIzIn0.JiXb8lR9e53GqZz51PZdaQ';\n\nexport const GA_ID = {\n  staging: 'UA-117143376-4',\n  production: 'UA-117143376-3',\n};\n\nconst STYLE_PREFIX = 'mapbox://styles/uladbohdan';\n\nexport const LIGHT_STYLE = `${STYLE_PREFIX}/cjpjxmip00js22snnkwi85d4i`;\n\nexport const MINSK = [27.5615, 53.9045];\n\nexport const BELARUS_BOUNDS = [\n  23.178357, // west\n  51.261881, // south\n  32.776784, // east\n  56.139922, // north\n];\n\nexport const EMOJI_SCALE_RATE = 4.5;\n\nexport const LegendShape = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  coordinates: PropTypes.arrayOf(PropTypes.number).isRequired,\n  text: PropTypes.string.isRequired,\n  emoji: PropTypes.string.isRequired,\n});\n\nexport const zIndexElements = createConstants(\n  'MAP',\n  'MARKER',\n  'CONTROLS',\n  'LABELS',\n  'LEGENDS_MODAL'\n);\n\nexport const zIndexes = [\n  zIndexElements.MAP,\n  zIndexElements.MARKER,\n  zIndexElements.CONTROLS,\n  zIndexElements.LABELS,\n  zIndexElements.LEGENDS_MODAL,\n].reduce((acc, cur, index) => {\n  acc[cur] = index;\n  return acc;\n}, {});\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactGA from 'react-ga';\n\nimport { GA_ID } from '../constants';\nimport { clearUtmParams } from '../utils';\n\nclass GA extends Component {\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n  };\n\n  componentDidMount() {\n    if (process.env.REACT_APP_WIR_ENV) {\n      ReactGA.initialize(GA_ID[process.env.REACT_APP_WIR_ENV], {\n        debug: process.env.REACT_APP_WIR_ENV !== 'production',\n      });\n      ReactGA.ga('send', 'pageview', window.location.pathname, {\n        hitCallback: clearUtmParams,\n      });\n    }\n  }\n\n  render() {\n    const { children } = this.props;\n    return children;\n  }\n}\n\nexport default GA;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Clickable = ({ onClick, children, ...props }) => (\n  <div\n    role=\"button\"\n    tabIndex={0}\n    onClick={onClick}\n    onKeyDown={event => {\n      if (event.key === 'Enter') {\n        onClick(event);\n      }\n    }}\n    {...props}\n  >\n    {children}\n  </div>\n);\n\nClickable.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Clickable;\n","import React from 'react';\n\nimport { zIndexes, zIndexElements } from '../constants';\n\nconst Title = () => (\n  <div className=\"title\" style={{ zIndex: zIndexes[zIndexElements.LABELS] }}>\n    Мапа\n    <br />\n    беларускіх\n    <br />\n    легенд\n  </div>\n);\n\nexport default Title;\n","import React from 'react';\n\nimport { zIndexes, zIndexElements } from '../constants';\n\nconst Wir = () => (\n  <div className=\"wir\" style={{ zIndex: zIndexes[zIndexElements.LABELS] }}>\n    <img className=\"wir__logo\" src=\"./images/logo.png\" alt=\"Wir.by\" />\n    <div>\n      зроблена камандай\n      <a\n        className=\"wir__link\"\n        href=\"http://wir.by?utm_source=map\"\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n      >\n        wir.by\n      </a>\n    </div>\n  </div>\n);\n\nexport default Wir;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nconst TextWithParagraphs = ({ text }) => {\n  const paragraphs = text.split('\\n');\n  const lastParagraphIndex = paragraphs.length - 1;\n\n  return paragraphs.map((paragraph, i) => (\n    <Fragment key={i}>\n      {paragraph}\n      {i < lastParagraphIndex && (\n        <>\n          <br />\n          <br />\n        </>\n      )}\n    </Fragment>\n  ));\n};\n\nTextWithParagraphs.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default TextWithParagraphs;\n","import React from 'react';\nimport formatcoords from 'formatcoords';\n\nimport Title from './Title';\nimport Wir from './Wir';\nimport TextWithParagraphs from './TextWithParagraphs';\n\nimport { LegendShape, zIndexes, zIndexElements } from '../constants';\nimport { getGoogleMapsUrl, track } from '../utils';\n\nconst LegendModal = ({ legend: { emoji, emojiCode, coordinates, title, text }, onClose }) => (\n  <div className=\"legend__modal\" style={{ zIndex: zIndexes[zIndexElements.LEGENDS_MODAL] }}>\n    <div className=\"legend__content\">\n      <div className=\"legend__left\">\n        <Title />\n        <img className=\"legend__emoji\" src={`./images/${emojiCode}.png`} alt={title} />\n        <Wir />\n      </div>\n      <div className=\"legend__right\">\n        <div className=\"legend__top\">\n          <div className=\"legend__emoji-wrapper\">\n            <img className=\"legend__emoji\" src={`./images/${emojiCode}.png`} alt={title} />\n          </div>\n          <a\n            href={getGoogleMapsUrl(coordinates)}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            onClick={() => track({ action: 'google-map-opened', label: `${emoji} ${title}` })}\n          >\n            {formatcoords(coordinates, true).format('DD MM X', {\n              latLonSeparator: ', ',\n              decimalPlaces: 2,\n            })}\n          </a>\n          <div className=\"legend__title\">{title}</div>\n        </div>\n        <div className=\"legend__text\">\n          <TextWithParagraphs text={text} />\n        </div>\n      </div>\n      <button className=\"legend__close-button\" onClick={onClose}>\n        <i className=\"legend__close-icon fa fa-times\" />\n      </button>\n    </div>\n  </div>\n);\n\nLegendModal.propTypes = {\n  legend: LegendShape.isRequired,\n};\n\nexport default LegendModal;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactMapboxGl, { Marker, ZoomControl } from 'react-mapbox-gl';\nimport keyBy from 'lodash/keyBy';\n\nimport Clickable from './Clickable';\nimport Title from './Title';\nimport Wir from './Wir';\nimport LegendModal from './LegendModal';\n\nimport { track, isDesktopDevice } from '../utils';\n\nimport {\n  MAPBOX_ACCESS_TOKEN,\n  LIGHT_STYLE,\n  MINSK,\n  BELARUS_BOUNDS,\n  EMOJI_SCALE_RATE,\n  LegendShape,\n  zIndexes,\n  zIndexElements,\n} from '../constants';\n\nconst Mapbox = ReactMapboxGl({\n  accessToken: MAPBOX_ACCESS_TOKEN,\n  logoPosition: 'bottom-right',\n  minZoom: 4,\n  maxZoom: 6.5,\n});\n\n// NOTE: When rendering many objects,\n// avoid using `Markers` as it will negatively affect performance.\n// Use `Layers` and `Features` instead.\n// https://github.com/alex3165/react-mapbox-gl/blob/master/docs/API.md#marker\n\nconst getFitBoundsOptions = ({ rightShift, topShift }) => ({\n  padding: {\n    left: rightShift ? 250 : 25,\n    top: topShift ? 100 : 25,\n    bottom: 25,\n    right: 25,\n  },\n});\n\nclass Map extends Component {\n  static propTypes = {\n    legends: PropTypes.arrayOf(LegendShape).isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.legendsById = keyBy(this.props.legends, 'id');\n    this.state = { activeLegendId: null };\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.resizeMap);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.resizeMap);\n  }\n\n  handleZoom = map => {\n    const { zoom } = this.state;\n    const nextZoom = Math.round(map.getZoom());\n    if (nextZoom !== zoom) {\n      this.setState({ zoom: nextZoom });\n    }\n  };\n\n  calculateShifts = () => {\n    const { activeLegendId } = this.state;\n    return {\n      rightShift: isDesktopDevice() && !activeLegendId,\n      topShift: !isDesktopDevice(),\n    };\n  };\n\n  resizeMap = () => {\n    this.map.resize();\n    this.map.fitBounds(BELARUS_BOUNDS, getFitBoundsOptions(this.calculateShifts()));\n  };\n\n  setActiveLegendId = activeLegendId => this.setState({ activeLegendId }, this.resizeMap);\n\n  render() {\n    const { legends } = this.props;\n    const { activeLegendId, zoom } = this.state;\n    const activeLegend = this.legendsById[activeLegendId];\n    return (\n      <>\n        <Mapbox\n          style={LIGHT_STYLE}\n          containerStyle={{\n            position: 'absolute',\n            top: activeLegendId ? 150 : 0,\n            bottom: 0,\n            width: activeLegendId ? '50%' : '100%',\n            zIndex: zIndexes[zIndexElements.MAP],\n          }}\n          fitBounds={BELARUS_BOUNDS}\n          fitBoundsOptions={getFitBoundsOptions(this.calculateShifts())}\n          center={MINSK}\n          onZoom={this.handleZoom}\n          // HACK: same `map` object\n          onSourceDataLoading={map => {\n            if (!this.map) {\n              this.map = map;\n            }\n          }}\n        >\n          {!activeLegendId && <ZoomControl style={{ zIndex: zIndexes[zIndexElements.CONTROLS] }} />}\n          {legends\n            .filter(({ id }) => !activeLegendId || id === activeLegendId)\n            .map(({ id, title, coordinates, emoji, emojiCode }) => (\n              <Marker\n                key={id}\n                coordinates={coordinates}\n                style={{ zIndex: zIndexes[zIndexElements.MARKER] }}\n              >\n                <Clickable\n                  onClick={({ currentTarget }) => {\n                    // HACK: clear outline\n                    currentTarget.blur();\n                    track({ action: 'emoji-clicked', label: `${emoji} ${title}` });\n                    this.setActiveLegendId(id);\n                  }}\n                >\n                  <img\n                    alt={emoji}\n                    src={`./images/${emojiCode}.png`}\n                    width={zoom * EMOJI_SCALE_RATE}\n                  />\n                </Clickable>\n              </Marker>\n            ))}\n        </Mapbox>\n        <Title />\n        <Wir />\n        {activeLegend && (\n          <LegendModal legend={activeLegend} onClose={() => this.setActiveLegendId(null)} />\n        )}\n      </>\n    );\n  }\n}\n\nexport default Map;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GA from './components/GA';\nimport Map from './components/Map';\n\nimport './styles.scss';\n\nconst App = () => (\n  <GA>\n    <Map legends={require('./legends')} />\n  </GA>\n);\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}